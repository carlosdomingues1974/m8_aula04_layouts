<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.Menu?>
<?import javafx.scene.control.MenuBar?>
<?import javafx.scene.control.MenuItem?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.BorderPane?>
<?import javafx.scene.text.Font?>

<!--
   Tal como no WPF e Android Studio, o Layout está separado do código.
   O Layout tem por base um elemento XML do tipo PANE: GridPane, AchorPane, etc.
   e existe para receber e organizar os outros elementos XML.

   Propriedades do Layout:
   Observar a TAG GridPane ou AnchorPane:
   - fx:controller="PrincipalController" faz a associação à file java (Controller)
      fx é um namespace definido pela property seguinte:
   - xmlns:fx="http://javafx.com/fxml/1" cria o namecapace com o nome fx.
      xmlns significa XML NameSpace.
   - xmlns="http://javafx.com/javafx/10.0.2-internal" faz a ligação à net
     para o código XML do javaFX. Se apagar esta prop, o ficheiro deixa de saber
     o que são as TAGs.

   SceneBuider; é a estrutura gráfica que permite os elementos gráficos.
   Em baixo encontra-se 2 separadores: Text e SceneBuilder
-->

<BorderPane fx:id="borderPane" maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="400.0" prefWidth="600.0" xmlns="http://javafx.com/javafx/21" xmlns:fx="http://javafx.com/fxml/1" fx:controller="example.m8_aula04_layouts.PrincipalController">
   <top>
      <MenuBar BorderPane.alignment="CENTER">
        <menus>
          <Menu mnemonicParsing="false" text="Ficheiro">
            <items>
              <MenuItem mnemonicParsing="false" onAction="#menuExitApplication" text="Sair" />
            </items>
          </Menu>
          <Menu mnemonicParsing="false" text="Layouts">
            <items>
              <MenuItem mnemonicParsing="false" text="AnchorPane" />
                  <MenuItem mnemonicParsing="false" text="BorderPane" />
                  <MenuItem mnemonicParsing="false" text="GridPane" />
                  <MenuItem mnemonicParsing="false" text="StackPane" />
            </items>
          </Menu>
          <Menu mnemonicParsing="false" text="Ajuda">
            <items>
              <MenuItem mnemonicParsing="false" onAction="#menuAbout" text="Acerca De" />
            </items>
          </Menu>
        </menus>
      </MenuBar>
   </top>
   <center>
      <AnchorPane prefHeight="200.0" prefWidth="200.0" BorderPane.alignment="CENTER">
         <children>
            <Label layoutX="226.0" layoutY="29.0" text="Cena Principal">
               <font>
                  <Font name="System Bold" size="22.0" />
               </font>
            </Label>
            <Button layoutX="254.0" layoutY="95.0" mnemonicParsing="false" onAction="#buttonSwitchScene" text="Troca de Cena">
               <font>
                  <Font name="System Bold" size="12.0" />
               </font>
            </Button>
            <Label layoutX="15.0" layoutY="165.0" text="O problema com a técnica SwicthScene é que substitui toda a Scene da Stage. Isto significa perder o menu.&#10;Testar Clicando no Botão . . . &#10;A solução é usar um root Layout BorderPane. Tem 5 Zonas: Top, Bottom, Left, Right e Center.  &#10;1º Observar as Zonas na janela 3D do SceneBuilder e verificar que tem um menuBar na zona TOP e um &#10;AnchorPane na zona CENTER.&#10;2º Arrastar um novo Controlo sobre a Hierarchy sem largar e passar sobre as várias zonas.&#10;&#10;A 1ª vantagem desta solução é que podemos substituir o BorderPane que está na zona CENTER por Scenes.&#10;A 2ª vantagem é que os elementos XML depositados nas zonas, ocupam logo o tamanho máximo disponível.&#10;Testar as opções do menu Layouts..." textFill="#111e82" />
         </children>
      </AnchorPane>
   </center>
</BorderPane>
